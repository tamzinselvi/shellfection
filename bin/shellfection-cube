#!/usr/bin/env python
from drawille import Canvas, line
import curses
import math
from time import sleep
import locale
from random import randint
import os

os.system('stty -g > ~/.currentTtySettings')

locale.setlocale(locale.LC_ALL,"")

stdscr = curses.initscr()
wwin = curses.newwin(0,0)
stdscr.refresh()

class Point3D:
    def __init__(self, x = 0, y = 0, z = 0):
        self.x, self.y, self.z = float(x), float(y), float(z)

    def rotateX(self, angle):
        """ Rotates the point around the X axis by the given angle in degrees. """
        rad = angle * math.pi / 180
        cosa = math.cos(rad)
        sina = math.sin(rad)
        y = self.y * cosa - self.z * sina
        z = self.y * sina + self.z * cosa
        return Point3D(self.x, y, z)

    def rotateY(self, angle):
        """ Rotates the point around the Y axis by the given angle in degrees. """
        rad = angle * math.pi / 180
        cosa = math.cos(rad)
        sina = math.sin(rad)
        z = self.z * cosa - self.x * sina
        x = self.z * sina + self.x * cosa
        return Point3D(x, self.y, z)

    def rotateZ(self, angle):
        """ Rotates the point around the Z axis by the given angle in degrees. """
        rad = angle * math.pi / 180
        cosa = math.cos(rad)
        sina = math.sin(rad)
        x = self.x * cosa - self.y * sina
        y = self.x * sina + self.y * cosa
        return Point3D(x, y, self.z)

    def project(self, win_width, win_height, fov, viewer_distance):
        """ Transforms this 3D point to 2D using a perspective projection. """
        factor = fov / (viewer_distance + self.z)
        x = self.x * factor + win_width / 2
        y = -self.y * factor + win_height / 2
        return Point3D(x, y, 1)


vertices = [
    Point3D(-20,20,-20),
    Point3D(20,20,-20),
    Point3D(20,-20,-20),
    Point3D(-20,-20,-20),
    Point3D(-20,20,20),
    Point3D(20,20,20),
    Point3D(20,-20,20),
    Point3D(-20,-20,20)
]

# Define the vertices that compose each of the 6 faces. These numbers are
# indices to the vertices list defined above.
faces = [(0,1,2,3),(1,5,6,2),(5,4,7,6),(4,0,3,7),(0,4,5,1),(3,2,6,7)]

def getTerminalSize():
    import os
    env = os.environ

    def ioctl_GWINSZ(fd):
        import fcntl
        import termios
        import struct
        cr = struct.unpack('hh', fcntl.ioctl(fd, termios.TIOCGWINSZ, '1234'))
        return cr
    cr = ioctl_GWINSZ(0) or ioctl_GWINSZ(1) or ioctl_GWINSZ(2)
    if not cr:
        try:
            fd = os.open(os.ctermid(), os.O_RDONLY)
            cr = ioctl_GWINSZ(fd)
            os.close(fd)
        except:
            pass
    if not cr:
        cr = (env.get('LINES', 25), env.get('COLUMNS', 80))
    return int(cr[1]), int(cr[0])


def __main__(stdscr, projection=False):
    angleX, angleY, angleZ = 0, 0, 0
    c = Canvas()
    curses.noecho()
    curses.curs_set(0)
    curses.start_color()
    curses.use_default_colors()
    stdscr.nodelay(1)
    for i in range(0, curses.COLORS):
        curses.init_pair(i + 1, i, -1)
    stdscr.keypad(1)
    max_y, max_x = stdscr.getmaxyx()
    var_x = {"value": randint(-max_x-max_x+40, -40), "direction": [-2, 2][randint(0, 1)]}
    var_y = {"value": randint(-40, max_y - 20), "direction": [-1, 1][randint(0, 1)]}
    color_i = 0
    color_direction = 1
    while 1:
        # Will hold transformed vertices.
        # if event == ord("q"):
        #     screen.clear()
        #     screen.refresh()
        #     break
        event = stdscr.getch()
        if event and event != -1 and event != curses.KEY_RESIZE:
            stdscr.clear()
            stdscr.refresh()
            break
        t = []
        max_y, max_x = stdscr.getmaxyx()
        var_y["value"] = var_y["value"] + var_y["direction"]
        if var_y["value"] < 0:
            var_y["value"] = 0
            var_y["direction"] = 1
        elif var_y["value"] > max_y - 20:
            var_y["value"] = max_y - 20
            var_y["direction"] = -1
        var_x["value"] = var_x["value"] + var_x["direction"]
        if var_x["value"] < -max_x-max_x+40:
            var_x["value"] = -max_x-max_x+40
            var_x["direction"] = 2
        elif var_x["value"] > -40:
            var_x["value"] = -40
            var_x["direction"] = -2

        for v in vertices:
            # Rotate the point around X axis, then around Y axis, and finally around Z axis.
            p = v.rotateX(angleX).rotateY(angleY).rotateZ(angleZ)
            if projection:
                # Transform the point from 3D to 2D
                p = p.project(50, 50, 50, 50)
             #Put the point in the list of transformed vertices
            t.append(p)

        for f in faces:
            for x,y in line(t[f[0]].x, t[f[0]].y, t[f[1]].x, t[f[1]].y):
                c.set(x,y)
            for x,y in line(t[f[1]].x, t[f[1]].y, t[f[2]].x, t[f[2]].y):
                c.set(x,y)
            for x,y in line(t[f[2]].x, t[f[2]].y, t[f[3]].x, t[f[3]].y):
                c.set(x,y)
            for x,y in line(t[f[3]].x, t[f[3]].y, t[f[0]].x, t[f[0]].y):
                c.set(x,y)

        stdscr.clear()
        f = c.frame(var_x["value"], -40, 80, 80)
        f_lines = f.split("\n")

        i = var_y["value"]
        for l in f_lines:
            if i < max_y:
                stdscr.addstr(i, 0, l[:-1], curses.color_pair(color_i))
                i += 1
        # stdscr.addstr(0, 0, '{0}\n'.format(f))
        # stdscr.addstr(0, 0, str(curses.COLORS))
        stdscr.refresh()

        angleX += 2
        angleY += 3
        angleZ += 5
        color_i += color_direction
        if color_i > curses.COLORS - 1:
            color_i = curses.COLORS - 1
            color_direction = -1
        elif color_i < 0:
            color_i = 0
            color_direction = 1
        sleep(1.0/20)
        c.clear()

if __name__ == '__main__':
    from sys import argv
    projection = False
    if '-p' in argv:
        projection = True
    curses.wrapper(__main__, projection)

os.system('stty `cat ~/.currentTtySettings`')
